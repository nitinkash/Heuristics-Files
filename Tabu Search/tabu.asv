%RUN THIS!!!!!!!!!!!!!!!
function [sol,cost] = tabu()  
%This instance of this problem is taken from http://www.opt.math.tu-graz.ac.at/qaplib/data.d/esc16a.dat

    a = [ 0    90    10    23    43     0     0     0     0     0    0     0;
             90     0     0     0     0    88     0     0     0     0    0     0;
             10     0     0     0     0     0    26    16     0     0    0     0;
             23     0     0     0     0     0     0     0     0     0    0     0;
             43     0     0     0     0     0     0     0     0     0    0     0;
              0    88     0     0     0     0     0     0     1     0    0     0;
              0     0    26     0     0     0     0     0     0     0    0     0;
              0     0    16     0     0     0     0     0     0    96    0     0;
              0     0     0     0     0     1     0     0     0     0   29     0;
              0     0     0     0     0     0     0    96     0     0    0    37;
              0     0     0     0     0     0     0     0    29     0    0     0;
              0     0     0     0     0     0     0     0     0    37    0     0]; %Gives a values

    b = [ 0    36    54    26    59    72     9    34    79    17   46    95;
            36     0    73    35    90    58    30    78    35    44   79    36;
            54    73     0    21    10    97    58    66    69    61   54    63;
            26    35    21     0    93    12    46    40    37    48   68    85;
            59    90    10    93     0    64     5    29    76    16    5    76;
            72    58    97    12    64     0    96    55    38    54    0    34;
             9    30    58    46     5    96     0    83    35    11   56    37;
            34    78    66    40    29    55    83     0    44    12   15    80;
            79    35    69    37    76    38    35    44     0    64   39    33;
            17    44    61    48    16    54    11    12    64     0   70    86;
            46    79    54    68     5     0    56    15    39    70    0    18;
            95    36    63    85    76    34    37    80    33    86   18     0]; %Gives the B values

    n = size(b,1);
    item_sol = 1:n; %Keep THIS FIXED
    cost = inf;
    while cost > 15000
        sol = randperm(n); %Start with a random soln %Play around with this
        cost = cost_compute(sol, b, a)
    end
    [tabu_size,~] = size(b); %Using the recommended tabu size from the book
    tabu = zeros(tabu_size, n);
    tabu = tabu_add(tabu, sol, tabu_size);
    z_matrix = zeros(n,n);
    cost_ = inf;
    while cost_>cost
        [sol_, swap] = neighbour(sol);
        cost_ = cost_compute(sol_,b,a);
        iteration_number = 1;
        z_matrix = Z(z_matrix, swap, sol_, iteration_number);
    end
    sol = sol_;
    cost = cost_;
    tabu = tabu_add(tabu, sol, tabu_size);
    iteration_number = 2;
    %Calculation for delta Starts here
    i = swap(1);
    j = swap(2);
    delta = [];
    sum = (a(i,i)*(b(sol(j),sol(j))-b(sol(i),sol(i)))) + (a(i,j)*(b(sol(j),sol(i))-b(sol(i),sol(j)))) + (a(j,i)*(b(sol(i),sol(j))-b(sol(j),sol(i)))) + (a(j,j)*(b(sol(i),sol(i))-b(sol(j),sol(j))));
    for p=1:n
        sum = sum + (a(p,i)*(b(sol(p),sol(j))-b(sol(p),sol(i)))) + (a(p,j)*(b(sol(p),sol(i))-b(sol(p),sol(j)))) + (a(i,p)*(b(sol(j),sol(p))-b(sol(i),sol(p)))) + (a(j,p)*(b(sol(i),sol(p))-b(sol(j),sol(p))));
    end
    delta(end+1) = sum;
    %First Delta is initialized
    c = [];
    jj = 0;
    while cost_compute(sol,b,a) > 10000 && jj <1000 %iteration_number < 5000 %Have set the max iterations to 1000
        [sol_, swap_] = neighbour(sol);
        if tabu_check(z_matrix, swap_, iteration_number, tabu_size, sol_) &&  aspiration_check(sol, sol_, b,a, z_matrix, swap_, iteration_number) %If both are true
            z_matrix = Z(z_matrix,swap_, sol_, iteration_number);
            tabu = tabu_add(tabu, sol, tabu_size);
            iteration_number = iteration_number + 1;
            sol = sol_;
            c = cost_compute(sol, b,a);
            jj = 0;
            %delta(end+1) = delta(end) + 
        
        else
           jj = jj +1
        end   
    end
    end
    
    
    
    
        
        
        
        
    
    
   
    
    
    




    